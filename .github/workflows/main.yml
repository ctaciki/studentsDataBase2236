name: CI with Code Coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake g++ libgtest-dev lcov

    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Debug

    - name: Build
      run: cmake --build build

    - name: Run tests
      run: ./build/StudentDatabase --run-tests

    - name: Generate coverage report
      run: |
        # Компилируем с поддержкой coverage
        cmake -B coverage-build -DCMAKE_BUILD_TYPE=Coverage
        cmake --build coverage-build
        
        # Запускаем тесты для генерации coverage данных
        ./coverage-build/StudentDatabase --run-tests
        
        # Генерируем отчет
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/test/*' '*/googletest/*' --output-file coverage.filtered.info
        genhtml coverage.filtered.info --output-directory coverage-report

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-umbrella

  coverage-badge:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Generate coverage badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ vars.GIST_ID }}
        filename: coverage.json
        label: Coverage
        message: ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }}
        color: ${{ needs.build-and-test.result == 'success' && 'green' || 'red' }}
        namedLogo: codecov
